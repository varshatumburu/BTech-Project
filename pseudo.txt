/* Modified weighted job scheduling algorithm to match requirements 
function FindOptimalSchedule(Requests(start_time, end_time, duration)[]){
	jobs_list :- []
	for each request{
		jobs :- all possible slots within (start_time,end_time) of duration
		// append all jobs into final list
		jobs_list <- jobs(request_index, start_time, end_time, duration)
	}

	/* We assume that WeightedJobScheduling algorithm already exists 
	Modify nonConflict check in WeightedJobScheduling to 
	avoid choosing jobs of same request index and with no overlap

	Run WeightedJobScheduling(jobs_list) with duration as weight

	Return set of chosen requests
}

function Kuhn(request_index, slot_mapping){
	/* request_index = which index to map with slot
	/* slot_mapping = has a mapping to slots of already existing requests 
	IF request_index already mapped
		return False
	Mark request_index mapped 
	nslots :- number of slots required to satisfy request

	For slot in possibleSlots{
		flag:-0
		IF all slots are empty
			Map slots to request 
			return True
		ELSE 
			For each overlapping slot{
				clashing_request :- request index which is mapped to overlapping slot
				/* Try to find another possible schedule for that request
				IF Kuhn(clashing_request, slot_mapping)
					/* Runs recursively, needs to be 1 in all loops
					fl:- fl*1
				ELSE 
					/* Even if shifting doesn't work once, slots cannot be shifted
					fl:- fl*0
					break
			}
			IF fl
				Map slots to request
				return True
	return False
}

function ShiftExistingRequests(CurrentSlotMapping, NewRequest){
	/* TODO slot adjusting
	IF slot shifting possible
		Update CurrentSlotMapping by adding NewRequest
		return True
	ELSE 
		return False
}

function FitOnlineRequests(NewRequest(start_time, end_time, duration)){
	requests <- NewRequest

	Call FindOptimalSchedule again ??? 

	/* We require some mechanism to do allow accommodation
	IF ShiftExistingRequests(CurrentSlotMapping, NewRequest)
		return True

	return False
}